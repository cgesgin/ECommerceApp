@page "/product/{id:int}"
@using ECommerceApp.Client.Services.BasketService
@using ECommerceApp.Client.Services.ProductService
@using ECommerceApp.Core.Dto
@using ECommerceApp.Core.Models

@inject IProductService ProductService
@inject IBasketService BasketService

@if (product == null)
{
    <span>@message</span>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
            }
            else
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@product.Images" Style="height: 200px;">
                    <ItemTemplate>
                        <MudImage Src="@context.Data"></MudImage>>
                    </ItemTemplate>
                </MudCarousel>
            }
        </div>
        <div class="media-body">
            <h4 class="mb-0">@product.Title</h4>
            <p>@product.Description</p>
            @if (product.ProductVariants != null && product.ProductVariants.Count > 1)
            {
                <div>
                    <select class="form-control" @bind=currentTypeId>
                        @foreach (var item in product.ProductVariants)
                        {
                            <option value="@item.ProductTypeId">@item.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVarriant() != null)
            {
                @if (GetSelectedVarriant().OriginalPrice > GetSelectedVarriant().Price)
                {
                    <h6 class="text-muted original-price">
                        ₺@GetSelectedVarriant().OriginalPrice;
                    </h6>
                }
                <h5 class="price">
                    ₺@GetSelectedVarriant().Price;
                </h5>
            }
            <button class="btn btn-primary" @onclick="AddToBasket">
                <i class="io io-cart"></i>Sepete Ekle
            </button>
        </div>
    </div>
}

@code {
    private Product? product;

    private string? message;

    [Parameter]
    public int Id { get; set; }

    private int currentTypeId = 1;

    protected override async Task OnParametersSetAsync()
    {
        message = "Yükleniyor...";
        var result = await ProductService.GetByIdAsync(Id);
        if (result != null)
        {
            product = result.Data;
            if (product.ProductVariants.Count > 0)
            {
                currentTypeId = product.ProductVariants[0].ProductTypeId;
            }
        }
        else
        {
            message = "Ürün bulunamadı";
        }
    }
    private ProductVariant GetSelectedVarriant()
    {
        var varriant = product.ProductVariants.FirstOrDefault(x => x.ProductTypeId == currentTypeId);
        return varriant;
    }

    private async Task AddToBasket()
    {
        var productVarriant = GetSelectedVarriant();
        var basketItem = new BasketItem
            {
                ProductId = productVarriant.ProductId,
                ProductTypeId= productVarriant.ProductTypeId
            };
        await BasketService.AddToBasket(basketItem);
    }
}
